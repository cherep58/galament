// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace galament {
namespace common {
namespace protobuf {
PROTOBUF_CONSTEXPR DataPacket::DataPacket(
    ::_pbi::ConstantInitialized)
  : uuid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , dt_(int64_t{0})
  , x_(0)
  , y_(0){}
struct DataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPacketDefaultTypeInternal() {}
  union {
    DataPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPacketDefaultTypeInternal _DataPacket_default_instance_;
PROTOBUF_CONSTEXPR UuidStatistic::UuidStatistic(
    ::_pbi::ConstantInitialized)
  : uuid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_1min_(0)
  , y_1min_(0)
  , x_5min_(0)
  , y_5min_(0){}
struct UuidStatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidStatisticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidStatisticDefaultTypeInternal() {}
  union {
    UuidStatistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidStatisticDefaultTypeInternal _UuidStatistic_default_instance_;
PROTOBUF_CONSTEXPR Statistic::Statistic(
    ::_pbi::ConstantInitialized)
  : uuid_list_(){}
struct StatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticDefaultTypeInternal() {}
  union {
    Statistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticDefaultTypeInternal _Statistic_default_instance_;
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace protobuf
}  // namespace common
}  // namespace galament
static ::_pb::Metadata file_level_metadata_messages_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::DataPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::DataPacket, uuid_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::DataPacket, dt_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::DataPacket, x_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::DataPacket, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::UuidStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::UuidStatistic, uuid_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::UuidStatistic, x_1min_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::UuidStatistic, y_1min_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::UuidStatistic, x_5min_),
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::UuidStatistic, y_5min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::Statistic, uuid_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::Message, type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::galament::common::protobuf::Message, payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::galament::common::protobuf::DataPacket)},
  { 10, -1, -1, sizeof(::galament::common::protobuf::UuidStatistic)},
  { 21, -1, -1, sizeof(::galament::common::protobuf::Statistic)},
  { 28, -1, -1, sizeof(::galament::common::protobuf::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::galament::common::protobuf::_DataPacket_default_instance_._instance,
  &::galament::common::protobuf::_UuidStatistic_default_instance_._instance,
  &::galament::common::protobuf::_Statistic_default_instance_._instance,
  &::galament::common::protobuf::_Message_default_instance_._instance,
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\022\030galament.common.protob"
  "uf\"<\n\nDataPacket\022\014\n\004uuid\030\001 \001(\014\022\n\n\002dt\030\002 \001"
  "(\003\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\"]\n\rUuidStatisti"
  "c\022\014\n\004uuid\030\001 \001(\014\022\016\n\006x_1min\030\002 \001(\002\022\016\n\006y_1mi"
  "n\030\003 \001(\002\022\016\n\006x_5min\030\004 \001(\002\022\016\n\006y_5min\030\005 \001(\002\""
  "G\n\tStatistic\022:\n\tuuid_list\030\001 \003(\0132\'.galame"
  "nt.common.protobuf.UuidStatistic\"\226\002\n\007Mes"
  "sage\0224\n\004type\030\001 \001(\0162&.galament.common.pro"
  "tobuf.Message.Type\022;\n\013data_packet\030\002 \001(\0132"
  "$.galament.common.protobuf.DataPacketH\000\022"
  "8\n\tstatistic\030\003 \001(\0132#.galament.common.pro"
  "tobuf.StatisticH\000\"S\n\004Type\022\013\n\007UNKNOWN\020\000\022\017"
  "\n\013DATA_PACKET\020\001\022\025\n\021STATISTIC_REQUEST\020\002\022\026"
  "\n\022STATISTIC_RESPONSE\020\003B\t\n\007payloadb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false, false, 561, descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto, file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace galament {
namespace common {
namespace protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool Message_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Message_Type Message::UNKNOWN;
constexpr Message_Type Message::DATA_PACKET;
constexpr Message_Type Message::STATISTIC_REQUEST;
constexpr Message_Type Message::STATISTIC_RESPONSE;
constexpr Message_Type Message::Type_MIN;
constexpr Message_Type Message::Type_MAX;
constexpr int Message::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DataPacket::_Internal {
 public:
};

DataPacket::DataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:galament.common.protobuf.DataPacket)
}
DataPacket::DataPacket(const DataPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    uuid_.Set(from._internal_uuid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&dt_, &from.dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&dt_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:galament.common.protobuf.DataPacket)
}

inline void DataPacket::SharedCtor() {
uuid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uuid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&dt_)) + sizeof(y_));
}

DataPacket::~DataPacket() {
  // @@protoc_insertion_point(destructor:galament.common.protobuf.DataPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.Destroy();
}

void DataPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:galament.common.protobuf.DataPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  ::memset(&dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&dt_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          dt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:galament.common.protobuf.DataPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (!this->_internal_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int64 dt = 2;
  if (this->_internal_dt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_dt(), target);
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:galament.common.protobuf.DataPacket)
  return target;
}

size_t DataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:galament.common.protobuf.DataPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // int64 dt = 2;
  if (this->_internal_dt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dt());
  }

  // float x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataPacket::GetClassData() const { return &_class_data_; }

void DataPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataPacket *>(to)->MergeFrom(
      static_cast<const DataPacket &>(from));
}


void DataPacket::MergeFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:galament.common.protobuf.DataPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_dt() != 0) {
    _internal_set_dt(from._internal_dt());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataPacket::CopyFrom(const DataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:galament.common.protobuf.DataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPacket::IsInitialized() const {
  return true;
}

void DataPacket::InternalSwap(DataPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uuid_, lhs_arena,
      &other->uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPacket, y_)
      + sizeof(DataPacket::y_)
      - PROTOBUF_FIELD_OFFSET(DataPacket, dt_)>(
          reinterpret_cast<char*>(&dt_),
          reinterpret_cast<char*>(&other->dt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}

// ===================================================================

class UuidStatistic::_Internal {
 public:
};

UuidStatistic::UuidStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:galament.common.protobuf.UuidStatistic)
}
UuidStatistic::UuidStatistic(const UuidStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    uuid_.Set(from._internal_uuid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_1min_, &from.x_1min_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_5min_) -
    reinterpret_cast<char*>(&x_1min_)) + sizeof(y_5min_));
  // @@protoc_insertion_point(copy_constructor:galament.common.protobuf.UuidStatistic)
}

inline void UuidStatistic::SharedCtor() {
uuid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uuid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_1min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_5min_) -
    reinterpret_cast<char*>(&x_1min_)) + sizeof(y_5min_));
}

UuidStatistic::~UuidStatistic() {
  // @@protoc_insertion_point(destructor:galament.common.protobuf.UuidStatistic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uuid_.Destroy();
}

void UuidStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:galament.common.protobuf.UuidStatistic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty();
  ::memset(&x_1min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_5min_) -
      reinterpret_cast<char*>(&x_1min_)) + sizeof(y_5min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidStatistic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x_1min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_1min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_1min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_1min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x_5min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          x_5min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_5min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          y_5min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidStatistic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:galament.common.protobuf.UuidStatistic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (!this->_internal_uuid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // float x_1min = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_1min = this->_internal_x_1min();
  uint32_t raw_x_1min;
  memcpy(&raw_x_1min, &tmp_x_1min, sizeof(tmp_x_1min));
  if (raw_x_1min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x_1min(), target);
  }

  // float y_1min = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_1min = this->_internal_y_1min();
  uint32_t raw_y_1min;
  memcpy(&raw_y_1min, &tmp_y_1min, sizeof(tmp_y_1min));
  if (raw_y_1min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y_1min(), target);
  }

  // float x_5min = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_5min = this->_internal_x_5min();
  uint32_t raw_x_5min;
  memcpy(&raw_x_5min, &tmp_x_5min, sizeof(tmp_x_5min));
  if (raw_x_5min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_x_5min(), target);
  }

  // float y_5min = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_5min = this->_internal_y_5min();
  uint32_t raw_y_5min;
  memcpy(&raw_y_5min, &tmp_y_5min, sizeof(tmp_y_5min));
  if (raw_y_5min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_y_5min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:galament.common.protobuf.UuidStatistic)
  return target;
}

size_t UuidStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:galament.common.protobuf.UuidStatistic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uuid());
  }

  // float x_1min = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_1min = this->_internal_x_1min();
  uint32_t raw_x_1min;
  memcpy(&raw_x_1min, &tmp_x_1min, sizeof(tmp_x_1min));
  if (raw_x_1min != 0) {
    total_size += 1 + 4;
  }

  // float y_1min = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_1min = this->_internal_y_1min();
  uint32_t raw_y_1min;
  memcpy(&raw_y_1min, &tmp_y_1min, sizeof(tmp_y_1min));
  if (raw_y_1min != 0) {
    total_size += 1 + 4;
  }

  // float x_5min = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_5min = this->_internal_x_5min();
  uint32_t raw_x_5min;
  memcpy(&raw_x_5min, &tmp_x_5min, sizeof(tmp_x_5min));
  if (raw_x_5min != 0) {
    total_size += 1 + 4;
  }

  // float y_5min = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_5min = this->_internal_y_5min();
  uint32_t raw_y_5min;
  memcpy(&raw_y_5min, &tmp_y_5min, sizeof(tmp_y_5min));
  if (raw_y_5min != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidStatistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UuidStatistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidStatistic::GetClassData() const { return &_class_data_; }

void UuidStatistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UuidStatistic *>(to)->MergeFrom(
      static_cast<const UuidStatistic &>(from));
}


void UuidStatistic::MergeFrom(const UuidStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:galament.common.protobuf.UuidStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_1min = from._internal_x_1min();
  uint32_t raw_x_1min;
  memcpy(&raw_x_1min, &tmp_x_1min, sizeof(tmp_x_1min));
  if (raw_x_1min != 0) {
    _internal_set_x_1min(from._internal_x_1min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_1min = from._internal_y_1min();
  uint32_t raw_y_1min;
  memcpy(&raw_y_1min, &tmp_y_1min, sizeof(tmp_y_1min));
  if (raw_y_1min != 0) {
    _internal_set_y_1min(from._internal_y_1min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_5min = from._internal_x_5min();
  uint32_t raw_x_5min;
  memcpy(&raw_x_5min, &tmp_x_5min, sizeof(tmp_x_5min));
  if (raw_x_5min != 0) {
    _internal_set_x_5min(from._internal_x_5min());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_5min = from._internal_y_5min();
  uint32_t raw_y_5min;
  memcpy(&raw_y_5min, &tmp_y_5min, sizeof(tmp_y_5min));
  if (raw_y_5min != 0) {
    _internal_set_y_5min(from._internal_y_5min());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidStatistic::CopyFrom(const UuidStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:galament.common.protobuf.UuidStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidStatistic::IsInitialized() const {
  return true;
}

void UuidStatistic::InternalSwap(UuidStatistic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uuid_, lhs_arena,
      &other->uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidStatistic, y_5min_)
      + sizeof(UuidStatistic::y_5min_)
      - PROTOBUF_FIELD_OFFSET(UuidStatistic, x_1min_)>(
          reinterpret_cast<char*>(&x_1min_),
          reinterpret_cast<char*>(&other->x_1min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidStatistic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}

// ===================================================================

class Statistic::_Internal {
 public:
};

Statistic::Statistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  uuid_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:galament.common.protobuf.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uuid_list_(from.uuid_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:galament.common.protobuf.Statistic)
}

inline void Statistic::SharedCtor() {
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:galament.common.protobuf.Statistic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Statistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Statistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:galament.common.protobuf.Statistic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .galament.common.protobuf.UuidStatistic uuid_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Statistic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:galament.common.protobuf.Statistic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .galament.common.protobuf.UuidStatistic uuid_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:galament.common.protobuf.Statistic)
  return target;
}

size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:galament.common.protobuf.Statistic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .galament.common.protobuf.UuidStatistic uuid_list = 1;
  total_size += 1UL * this->_internal_uuid_list_size();
  for (const auto& msg : this->uuid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Statistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistic::GetClassData() const { return &_class_data_; }

void Statistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Statistic *>(to)->MergeFrom(
      static_cast<const Statistic &>(from));
}


void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:galament.common.protobuf.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  uuid_list_.MergeFrom(from.uuid_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:galament.common.protobuf.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uuid_list_.InternalSwap(&other->uuid_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}

// ===================================================================

class Message::_Internal {
 public:
  static const ::galament::common::protobuf::DataPacket& data_packet(const Message* msg);
  static const ::galament::common::protobuf::Statistic& statistic(const Message* msg);
};

const ::galament::common::protobuf::DataPacket&
Message::_Internal::data_packet(const Message* msg) {
  return *msg->payload_.data_packet_;
}
const ::galament::common::protobuf::Statistic&
Message::_Internal::statistic(const Message* msg) {
  return *msg->payload_.statistic_;
}
void Message::set_allocated_data_packet(::galament::common::protobuf::DataPacket* data_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (data_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_packet);
    if (message_arena != submessage_arena) {
      data_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_packet, submessage_arena);
    }
    set_has_data_packet();
    payload_.data_packet_ = data_packet;
  }
  // @@protoc_insertion_point(field_set_allocated:galament.common.protobuf.Message.data_packet)
}
void Message::set_allocated_statistic(::galament::common::protobuf::Statistic* statistic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (statistic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(statistic);
    if (message_arena != submessage_arena) {
      statistic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistic, submessage_arena);
    }
    set_has_statistic();
    payload_.statistic_ = statistic;
  }
  // @@protoc_insertion_point(field_set_allocated:galament.common.protobuf.Message.statistic)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:galament.common.protobuf.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kDataPacket: {
      _internal_mutable_data_packet()->::galament::common::protobuf::DataPacket::MergeFrom(from._internal_data_packet());
      break;
    }
    case kStatistic: {
      _internal_mutable_statistic()->::galament::common::protobuf::Statistic::MergeFrom(from._internal_statistic());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:galament.common.protobuf.Message)
}

inline void Message::SharedCtor() {
type_ = 0;
clear_has_payload();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:galament.common.protobuf.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:galament.common.protobuf.Message)
  switch (payload_case()) {
    case kDataPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.data_packet_;
      }
      break;
    }
    case kStatistic: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.statistic_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:galament.common.protobuf.Message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .galament.common.protobuf.Message.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::galament::common::protobuf::Message_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .galament.common.protobuf.DataPacket data_packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .galament.common.protobuf.Statistic statistic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:galament.common.protobuf.Message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .galament.common.protobuf.Message.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .galament.common.protobuf.DataPacket data_packet = 2;
  if (_internal_has_data_packet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_packet(this),
        _Internal::data_packet(this).GetCachedSize(), target, stream);
  }

  // .galament.common.protobuf.Statistic statistic = 3;
  if (_internal_has_statistic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::statistic(this),
        _Internal::statistic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:galament.common.protobuf.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:galament.common.protobuf.Message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .galament.common.protobuf.Message.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (payload_case()) {
    // .galament.common.protobuf.DataPacket data_packet = 2;
    case kDataPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.data_packet_);
      break;
    }
    // .galament.common.protobuf.Statistic statistic = 3;
    case kStatistic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.statistic_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:galament.common.protobuf.Message)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.payload_case()) {
    case kDataPacket: {
      _internal_mutable_data_packet()->::galament::common::protobuf::DataPacket::MergeFrom(from._internal_data_packet());
      break;
    }
    case kStatistic: {
      _internal_mutable_statistic()->::galament::common::protobuf::Statistic::MergeFrom(from._internal_statistic());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:galament.common.protobuf.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace common
}  // namespace galament
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::galament::common::protobuf::DataPacket*
Arena::CreateMaybeMessage< ::galament::common::protobuf::DataPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::galament::common::protobuf::DataPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::galament::common::protobuf::UuidStatistic*
Arena::CreateMaybeMessage< ::galament::common::protobuf::UuidStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::galament::common::protobuf::UuidStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::galament::common::protobuf::Statistic*
Arena::CreateMaybeMessage< ::galament::common::protobuf::Statistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::galament::common::protobuf::Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::galament::common::protobuf::Message*
Arena::CreateMaybeMessage< ::galament::common::protobuf::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::galament::common::protobuf::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
