// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace galament {
namespace common {
namespace protobuf {
class DataPacket;
struct DataPacketDefaultTypeInternal;
extern DataPacketDefaultTypeInternal _DataPacket_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Statistic;
struct StatisticDefaultTypeInternal;
extern StatisticDefaultTypeInternal _Statistic_default_instance_;
class UuidStatistic;
struct UuidStatisticDefaultTypeInternal;
extern UuidStatisticDefaultTypeInternal _UuidStatistic_default_instance_;
}  // namespace protobuf
}  // namespace common
}  // namespace galament
PROTOBUF_NAMESPACE_OPEN
template<> ::galament::common::protobuf::DataPacket* Arena::CreateMaybeMessage<::galament::common::protobuf::DataPacket>(Arena*);
template<> ::galament::common::protobuf::Message* Arena::CreateMaybeMessage<::galament::common::protobuf::Message>(Arena*);
template<> ::galament::common::protobuf::Statistic* Arena::CreateMaybeMessage<::galament::common::protobuf::Statistic>(Arena*);
template<> ::galament::common::protobuf::UuidStatistic* Arena::CreateMaybeMessage<::galament::common::protobuf::UuidStatistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace galament {
namespace common {
namespace protobuf {

enum Message_Type : int {
  Message_Type_UNKNOWN = 0,
  Message_Type_DATA_PACKET = 1,
  Message_Type_STATISTIC_REQUEST = 2,
  Message_Type_STATISTIC_RESPONSE = 3,
  Message_Type_Message_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Message_Type_Message_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Message_Type_IsValid(int value);
constexpr Message_Type Message_Type_Type_MIN = Message_Type_UNKNOWN;
constexpr Message_Type Message_Type_Type_MAX = Message_Type_STATISTIC_RESPONSE;
constexpr int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Type_descriptor();
template<typename T>
inline const std::string& Message_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_Type_descriptor(), enum_t_value);
}
inline bool Message_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class DataPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:galament.common.protobuf.DataPacket) */ {
 public:
  inline DataPacket() : DataPacket(nullptr) {}
  ~DataPacket() override;
  explicit PROTOBUF_CONSTEXPR DataPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataPacket(const DataPacket& from);
  DataPacket(DataPacket&& from) noexcept
    : DataPacket() {
    *this = ::std::move(from);
  }

  inline DataPacket& operator=(const DataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPacket& operator=(DataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPacket* internal_default_instance() {
    return reinterpret_cast<const DataPacket*>(
               &_DataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataPacket& a, DataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataPacket& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "galament.common.protobuf.DataPacket";
  }
  protected:
  explicit DataPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kDtFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // int64 dt = 2;
  void clear_dt();
  int64_t dt() const;
  void set_dt(int64_t value);
  private:
  int64_t _internal_dt() const;
  void _internal_set_dt(int64_t value);
  public:

  // float x = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:galament.common.protobuf.DataPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  int64_t dt_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UuidStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:galament.common.protobuf.UuidStatistic) */ {
 public:
  inline UuidStatistic() : UuidStatistic(nullptr) {}
  ~UuidStatistic() override;
  explicit PROTOBUF_CONSTEXPR UuidStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UuidStatistic(const UuidStatistic& from);
  UuidStatistic(UuidStatistic&& from) noexcept
    : UuidStatistic() {
    *this = ::std::move(from);
  }

  inline UuidStatistic& operator=(const UuidStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline UuidStatistic& operator=(UuidStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UuidStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const UuidStatistic* internal_default_instance() {
    return reinterpret_cast<const UuidStatistic*>(
               &_UuidStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UuidStatistic& a, UuidStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(UuidStatistic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UuidStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UuidStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UuidStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UuidStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UuidStatistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UuidStatistic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "galament.common.protobuf.UuidStatistic";
  }
  protected:
  explicit UuidStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kX1MinFieldNumber = 2,
    kY1MinFieldNumber = 3,
    kX5MinFieldNumber = 4,
    kY5MinFieldNumber = 5,
  };
  // bytes uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // float x_1min = 2;
  void clear_x_1min();
  float x_1min() const;
  void set_x_1min(float value);
  private:
  float _internal_x_1min() const;
  void _internal_set_x_1min(float value);
  public:

  // float y_1min = 3;
  void clear_y_1min();
  float y_1min() const;
  void set_y_1min(float value);
  private:
  float _internal_y_1min() const;
  void _internal_set_y_1min(float value);
  public:

  // float x_5min = 4;
  void clear_x_5min();
  float x_5min() const;
  void set_x_5min(float value);
  private:
  float _internal_x_5min() const;
  void _internal_set_x_5min(float value);
  public:

  // float y_5min = 5;
  void clear_y_5min();
  float y_5min() const;
  void set_y_5min(float value);
  private:
  float _internal_y_5min() const;
  void _internal_set_y_5min(float value);
  public:

  // @@protoc_insertion_point(class_scope:galament.common.protobuf.UuidStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  float x_1min_;
  float y_1min_;
  float x_5min_;
  float y_5min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Statistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:galament.common.protobuf.Statistic) */ {
 public:
  inline Statistic() : Statistic(nullptr) {}
  ~Statistic() override;
  explicit PROTOBUF_CONSTEXPR Statistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Statistic(const Statistic& from);
  Statistic(Statistic&& from) noexcept
    : Statistic() {
    *this = ::std::move(from);
  }

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistic& operator=(Statistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Statistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Statistic* internal_default_instance() {
    return reinterpret_cast<const Statistic*>(
               &_Statistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Statistic& a, Statistic& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Statistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Statistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Statistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Statistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "galament.common.protobuf.Statistic";
  }
  protected:
  explicit Statistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidListFieldNumber = 1,
  };
  // repeated .galament.common.protobuf.UuidStatistic uuid_list = 1;
  int uuid_list_size() const;
  private:
  int _internal_uuid_list_size() const;
  public:
  void clear_uuid_list();
  ::galament::common::protobuf::UuidStatistic* mutable_uuid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::galament::common::protobuf::UuidStatistic >*
      mutable_uuid_list();
  private:
  const ::galament::common::protobuf::UuidStatistic& _internal_uuid_list(int index) const;
  ::galament::common::protobuf::UuidStatistic* _internal_add_uuid_list();
  public:
  const ::galament::common::protobuf::UuidStatistic& uuid_list(int index) const;
  ::galament::common::protobuf::UuidStatistic* add_uuid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::galament::common::protobuf::UuidStatistic >&
      uuid_list() const;

  // @@protoc_insertion_point(class_scope:galament.common.protobuf.Statistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::galament::common::protobuf::UuidStatistic > uuid_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:galament.common.protobuf.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kDataPacket = 2,
    kStatistic = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "galament.common.protobuf.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static constexpr Type UNKNOWN =
    Message_Type_UNKNOWN;
  static constexpr Type DATA_PACKET =
    Message_Type_DATA_PACKET;
  static constexpr Type STATISTIC_REQUEST =
    Message_Type_STATISTIC_REQUEST;
  static constexpr Type STATISTIC_RESPONSE =
    Message_Type_STATISTIC_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Message_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Message_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Message_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDataPacketFieldNumber = 2,
    kStatisticFieldNumber = 3,
  };
  // .galament.common.protobuf.Message.Type type = 1;
  void clear_type();
  ::galament::common::protobuf::Message_Type type() const;
  void set_type(::galament::common::protobuf::Message_Type value);
  private:
  ::galament::common::protobuf::Message_Type _internal_type() const;
  void _internal_set_type(::galament::common::protobuf::Message_Type value);
  public:

  // .galament.common.protobuf.DataPacket data_packet = 2;
  bool has_data_packet() const;
  private:
  bool _internal_has_data_packet() const;
  public:
  void clear_data_packet();
  const ::galament::common::protobuf::DataPacket& data_packet() const;
  PROTOBUF_NODISCARD ::galament::common::protobuf::DataPacket* release_data_packet();
  ::galament::common::protobuf::DataPacket* mutable_data_packet();
  void set_allocated_data_packet(::galament::common::protobuf::DataPacket* data_packet);
  private:
  const ::galament::common::protobuf::DataPacket& _internal_data_packet() const;
  ::galament::common::protobuf::DataPacket* _internal_mutable_data_packet();
  public:
  void unsafe_arena_set_allocated_data_packet(
      ::galament::common::protobuf::DataPacket* data_packet);
  ::galament::common::protobuf::DataPacket* unsafe_arena_release_data_packet();

  // .galament.common.protobuf.Statistic statistic = 3;
  bool has_statistic() const;
  private:
  bool _internal_has_statistic() const;
  public:
  void clear_statistic();
  const ::galament::common::protobuf::Statistic& statistic() const;
  PROTOBUF_NODISCARD ::galament::common::protobuf::Statistic* release_statistic();
  ::galament::common::protobuf::Statistic* mutable_statistic();
  void set_allocated_statistic(::galament::common::protobuf::Statistic* statistic);
  private:
  const ::galament::common::protobuf::Statistic& _internal_statistic() const;
  ::galament::common::protobuf::Statistic* _internal_mutable_statistic();
  public:
  void unsafe_arena_set_allocated_statistic(
      ::galament::common::protobuf::Statistic* statistic);
  ::galament::common::protobuf::Statistic* unsafe_arena_release_statistic();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:galament.common.protobuf.Message)
 private:
  class _Internal;
  void set_has_data_packet();
  void set_has_statistic();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::galament::common::protobuf::DataPacket* data_packet_;
    ::galament::common::protobuf::Statistic* statistic_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataPacket

// bytes uuid = 1;
inline void DataPacket::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& DataPacket::uuid() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.DataPacket.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataPacket::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:galament.common.protobuf.DataPacket.uuid)
}
inline std::string* DataPacket::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:galament.common.protobuf.DataPacket.uuid)
  return _s;
}
inline const std::string& DataPacket::_internal_uuid() const {
  return uuid_.Get();
}
inline void DataPacket::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* DataPacket::_internal_mutable_uuid() {
  
  return uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* DataPacket::release_uuid() {
  // @@protoc_insertion_point(field_release:galament.common.protobuf.DataPacket.uuid)
  return uuid_.Release();
}
inline void DataPacket::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:galament.common.protobuf.DataPacket.uuid)
}

// int64 dt = 2;
inline void DataPacket::clear_dt() {
  dt_ = int64_t{0};
}
inline int64_t DataPacket::_internal_dt() const {
  return dt_;
}
inline int64_t DataPacket::dt() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.DataPacket.dt)
  return _internal_dt();
}
inline void DataPacket::_internal_set_dt(int64_t value) {
  
  dt_ = value;
}
inline void DataPacket::set_dt(int64_t value) {
  _internal_set_dt(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.DataPacket.dt)
}

// float x = 3;
inline void DataPacket::clear_x() {
  x_ = 0;
}
inline float DataPacket::_internal_x() const {
  return x_;
}
inline float DataPacket::x() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.DataPacket.x)
  return _internal_x();
}
inline void DataPacket::_internal_set_x(float value) {
  
  x_ = value;
}
inline void DataPacket::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.DataPacket.x)
}

// float y = 4;
inline void DataPacket::clear_y() {
  y_ = 0;
}
inline float DataPacket::_internal_y() const {
  return y_;
}
inline float DataPacket::y() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.DataPacket.y)
  return _internal_y();
}
inline void DataPacket::_internal_set_y(float value) {
  
  y_ = value;
}
inline void DataPacket::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.DataPacket.y)
}

// -------------------------------------------------------------------

// UuidStatistic

// bytes uuid = 1;
inline void UuidStatistic::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& UuidStatistic::uuid() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.UuidStatistic.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UuidStatistic::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:galament.common.protobuf.UuidStatistic.uuid)
}
inline std::string* UuidStatistic::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:galament.common.protobuf.UuidStatistic.uuid)
  return _s;
}
inline const std::string& UuidStatistic::_internal_uuid() const {
  return uuid_.Get();
}
inline void UuidStatistic::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UuidStatistic::_internal_mutable_uuid() {
  
  return uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UuidStatistic::release_uuid() {
  // @@protoc_insertion_point(field_release:galament.common.protobuf.UuidStatistic.uuid)
  return uuid_.Release();
}
inline void UuidStatistic::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:galament.common.protobuf.UuidStatistic.uuid)
}

// float x_1min = 2;
inline void UuidStatistic::clear_x_1min() {
  x_1min_ = 0;
}
inline float UuidStatistic::_internal_x_1min() const {
  return x_1min_;
}
inline float UuidStatistic::x_1min() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.UuidStatistic.x_1min)
  return _internal_x_1min();
}
inline void UuidStatistic::_internal_set_x_1min(float value) {
  
  x_1min_ = value;
}
inline void UuidStatistic::set_x_1min(float value) {
  _internal_set_x_1min(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.UuidStatistic.x_1min)
}

// float y_1min = 3;
inline void UuidStatistic::clear_y_1min() {
  y_1min_ = 0;
}
inline float UuidStatistic::_internal_y_1min() const {
  return y_1min_;
}
inline float UuidStatistic::y_1min() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.UuidStatistic.y_1min)
  return _internal_y_1min();
}
inline void UuidStatistic::_internal_set_y_1min(float value) {
  
  y_1min_ = value;
}
inline void UuidStatistic::set_y_1min(float value) {
  _internal_set_y_1min(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.UuidStatistic.y_1min)
}

// float x_5min = 4;
inline void UuidStatistic::clear_x_5min() {
  x_5min_ = 0;
}
inline float UuidStatistic::_internal_x_5min() const {
  return x_5min_;
}
inline float UuidStatistic::x_5min() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.UuidStatistic.x_5min)
  return _internal_x_5min();
}
inline void UuidStatistic::_internal_set_x_5min(float value) {
  
  x_5min_ = value;
}
inline void UuidStatistic::set_x_5min(float value) {
  _internal_set_x_5min(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.UuidStatistic.x_5min)
}

// float y_5min = 5;
inline void UuidStatistic::clear_y_5min() {
  y_5min_ = 0;
}
inline float UuidStatistic::_internal_y_5min() const {
  return y_5min_;
}
inline float UuidStatistic::y_5min() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.UuidStatistic.y_5min)
  return _internal_y_5min();
}
inline void UuidStatistic::_internal_set_y_5min(float value) {
  
  y_5min_ = value;
}
inline void UuidStatistic::set_y_5min(float value) {
  _internal_set_y_5min(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.UuidStatistic.y_5min)
}

// -------------------------------------------------------------------

// Statistic

// repeated .galament.common.protobuf.UuidStatistic uuid_list = 1;
inline int Statistic::_internal_uuid_list_size() const {
  return uuid_list_.size();
}
inline int Statistic::uuid_list_size() const {
  return _internal_uuid_list_size();
}
inline void Statistic::clear_uuid_list() {
  uuid_list_.Clear();
}
inline ::galament::common::protobuf::UuidStatistic* Statistic::mutable_uuid_list(int index) {
  // @@protoc_insertion_point(field_mutable:galament.common.protobuf.Statistic.uuid_list)
  return uuid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::galament::common::protobuf::UuidStatistic >*
Statistic::mutable_uuid_list() {
  // @@protoc_insertion_point(field_mutable_list:galament.common.protobuf.Statistic.uuid_list)
  return &uuid_list_;
}
inline const ::galament::common::protobuf::UuidStatistic& Statistic::_internal_uuid_list(int index) const {
  return uuid_list_.Get(index);
}
inline const ::galament::common::protobuf::UuidStatistic& Statistic::uuid_list(int index) const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.Statistic.uuid_list)
  return _internal_uuid_list(index);
}
inline ::galament::common::protobuf::UuidStatistic* Statistic::_internal_add_uuid_list() {
  return uuid_list_.Add();
}
inline ::galament::common::protobuf::UuidStatistic* Statistic::add_uuid_list() {
  ::galament::common::protobuf::UuidStatistic* _add = _internal_add_uuid_list();
  // @@protoc_insertion_point(field_add:galament.common.protobuf.Statistic.uuid_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::galament::common::protobuf::UuidStatistic >&
Statistic::uuid_list() const {
  // @@protoc_insertion_point(field_list:galament.common.protobuf.Statistic.uuid_list)
  return uuid_list_;
}

// -------------------------------------------------------------------

// Message

// .galament.common.protobuf.Message.Type type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::galament::common::protobuf::Message_Type Message::_internal_type() const {
  return static_cast< ::galament::common::protobuf::Message_Type >(type_);
}
inline ::galament::common::protobuf::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.Message.type)
  return _internal_type();
}
inline void Message::_internal_set_type(::galament::common::protobuf::Message_Type value) {
  
  type_ = value;
}
inline void Message::set_type(::galament::common::protobuf::Message_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:galament.common.protobuf.Message.type)
}

// .galament.common.protobuf.DataPacket data_packet = 2;
inline bool Message::_internal_has_data_packet() const {
  return payload_case() == kDataPacket;
}
inline bool Message::has_data_packet() const {
  return _internal_has_data_packet();
}
inline void Message::set_has_data_packet() {
  _oneof_case_[0] = kDataPacket;
}
inline void Message::clear_data_packet() {
  if (_internal_has_data_packet()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.data_packet_;
    }
    clear_has_payload();
  }
}
inline ::galament::common::protobuf::DataPacket* Message::release_data_packet() {
  // @@protoc_insertion_point(field_release:galament.common.protobuf.Message.data_packet)
  if (_internal_has_data_packet()) {
    clear_has_payload();
    ::galament::common::protobuf::DataPacket* temp = payload_.data_packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.data_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::galament::common::protobuf::DataPacket& Message::_internal_data_packet() const {
  return _internal_has_data_packet()
      ? *payload_.data_packet_
      : reinterpret_cast< ::galament::common::protobuf::DataPacket&>(::galament::common::protobuf::_DataPacket_default_instance_);
}
inline const ::galament::common::protobuf::DataPacket& Message::data_packet() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.Message.data_packet)
  return _internal_data_packet();
}
inline ::galament::common::protobuf::DataPacket* Message::unsafe_arena_release_data_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:galament.common.protobuf.Message.data_packet)
  if (_internal_has_data_packet()) {
    clear_has_payload();
    ::galament::common::protobuf::DataPacket* temp = payload_.data_packet_;
    payload_.data_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_data_packet(::galament::common::protobuf::DataPacket* data_packet) {
  clear_payload();
  if (data_packet) {
    set_has_data_packet();
    payload_.data_packet_ = data_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:galament.common.protobuf.Message.data_packet)
}
inline ::galament::common::protobuf::DataPacket* Message::_internal_mutable_data_packet() {
  if (!_internal_has_data_packet()) {
    clear_payload();
    set_has_data_packet();
    payload_.data_packet_ = CreateMaybeMessage< ::galament::common::protobuf::DataPacket >(GetArenaForAllocation());
  }
  return payload_.data_packet_;
}
inline ::galament::common::protobuf::DataPacket* Message::mutable_data_packet() {
  ::galament::common::protobuf::DataPacket* _msg = _internal_mutable_data_packet();
  // @@protoc_insertion_point(field_mutable:galament.common.protobuf.Message.data_packet)
  return _msg;
}

// .galament.common.protobuf.Statistic statistic = 3;
inline bool Message::_internal_has_statistic() const {
  return payload_case() == kStatistic;
}
inline bool Message::has_statistic() const {
  return _internal_has_statistic();
}
inline void Message::set_has_statistic() {
  _oneof_case_[0] = kStatistic;
}
inline void Message::clear_statistic() {
  if (_internal_has_statistic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.statistic_;
    }
    clear_has_payload();
  }
}
inline ::galament::common::protobuf::Statistic* Message::release_statistic() {
  // @@protoc_insertion_point(field_release:galament.common.protobuf.Message.statistic)
  if (_internal_has_statistic()) {
    clear_has_payload();
    ::galament::common::protobuf::Statistic* temp = payload_.statistic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.statistic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::galament::common::protobuf::Statistic& Message::_internal_statistic() const {
  return _internal_has_statistic()
      ? *payload_.statistic_
      : reinterpret_cast< ::galament::common::protobuf::Statistic&>(::galament::common::protobuf::_Statistic_default_instance_);
}
inline const ::galament::common::protobuf::Statistic& Message::statistic() const {
  // @@protoc_insertion_point(field_get:galament.common.protobuf.Message.statistic)
  return _internal_statistic();
}
inline ::galament::common::protobuf::Statistic* Message::unsafe_arena_release_statistic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:galament.common.protobuf.Message.statistic)
  if (_internal_has_statistic()) {
    clear_has_payload();
    ::galament::common::protobuf::Statistic* temp = payload_.statistic_;
    payload_.statistic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_statistic(::galament::common::protobuf::Statistic* statistic) {
  clear_payload();
  if (statistic) {
    set_has_statistic();
    payload_.statistic_ = statistic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:galament.common.protobuf.Message.statistic)
}
inline ::galament::common::protobuf::Statistic* Message::_internal_mutable_statistic() {
  if (!_internal_has_statistic()) {
    clear_payload();
    set_has_statistic();
    payload_.statistic_ = CreateMaybeMessage< ::galament::common::protobuf::Statistic >(GetArenaForAllocation());
  }
  return payload_.statistic_;
}
inline ::galament::common::protobuf::Statistic* Message::mutable_statistic() {
  ::galament::common::protobuf::Statistic* _msg = _internal_mutable_statistic();
  // @@protoc_insertion_point(field_mutable:galament.common.protobuf.Message.statistic)
  return _msg;
}

inline bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace common
}  // namespace galament

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::galament::common::protobuf::Message_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::galament::common::protobuf::Message_Type>() {
  return ::galament::common::protobuf::Message_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
